# 提供了以下 appenderName
# org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

# log4j 的 layout
# org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

# log4j 的打印参数
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

# Global logging configuration
# 设置日志输出级别以及输出目的地，可以设置多个输出目的地，开发环境下，日志级别要设置成 DEBUG 或者 ERROR
# 前面写日志级别，逗号后面写输出目的地
# log4j.rootLogger = [level],appenderName1,appenderName2,...
log4j.rootLogger=DEBUG,CONSOLE,LOGFILE

#### 控制台输出 ####
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
# 输出到控制台
log4j.appender.CONSOLE.Target = System.out 
# 指定控制台输出日志的级别
log4j.appender.CONSOLE.Threshold=DEBUG
# 默认只是 true，表示是否立即输出
log4j.appender.CONSOLE.ImmediateFlush=true
# 设置编码格式
log4j.appender.CONSOLE.Encoding=UTF-8
# 日志输出布局
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
# 如果日志输出布局为 PatternLayout 自定义级别，需要使用 ConversionPattern 指定输出输出格式
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MMM-dd HH:mm:ss} %5p (%c:%L) - %m%n



#### 输出错误信息到文件 ####
log4j.appender.LOGFILE=org.apache.log4j.FileAppender
# 指定输出文件路径
log4j.appender.LOGFILE.File=./log/info.log
# 日志输出到文件默认为 true
log4j.appender.LOGFILE.Append=true
# 指定日志输出级别
log4j.appender.LOGFILE.Threshold=INFO
# 是否立即输出，默认值是 true
log4j.appender.LOGFILE.ImmediateFlush=true
# 设置编码格式
log4j.appender.LOGFILE.Encoding=UTF-8
# 日志输出布局
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
# 如果日志输出布局为 PatternLayout 自定义级别，需要使用 ConversionPattern 指定输出格式
log4j.appender.LOGFILE.layout.ConversionPattern=%d{yyyy-MMM-dd HH:mm:ss} %5p (%c:%L) - %m%n
